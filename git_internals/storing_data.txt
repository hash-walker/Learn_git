Storing Data
Git stores an entire snapshot of files on a per-commit level. This was a surprise to me! I always assumed each commit only stored the changes made in that commit.

Optimization
While it's true that Git stores entire snapshots, it does have some performance optimizations so that your .git directory doesn't get too unbearably large.

Git compresses and packs files to store them more efficiently.
Git deduplicates files that are the same across different commits. If a file doesn't change between commits, Git will only store it once.
Assignment
Use git cat-file -p to view the hash of the blob for the titles.md file in your last commit. Save that hash somewhere in your notes.
Add a new directory to your project called quotes. Inside, add two files:
starwars.md:

- "May the Force be with you"
- "I find your lack of faith disturbing"
- "I am your father"
- "Do or do not. There is no try"
- "I've got a bad feeling about this"
Copy icon
dune.md:

- "May thy knife chip and shatter"
- "A Great Man Doesn't Seek To Lead. He's Called To It."
- "An Animal Caught In A Trap Will Gnaw Off Its Own Leg To Escape. What Will You Do?"
- "When Is A Gift Not A Gift?"
Copy icon
Stage and commit both files in a single commit with a message starting with C:, for example, C: add quotes.
Use the command cat-file to view the hash of the blob for the titles.md file again in the latest commit. You should notice that it still has the same hash because the file hasn't changed.
Run and submit the CLI tests from the root of your repo.
Tip
You can stage each file separately:

git add quotes/starwars.md
git add quotes/dune.md
Copy icon
Or you can stage all the changes in your repo at once:

git add .
